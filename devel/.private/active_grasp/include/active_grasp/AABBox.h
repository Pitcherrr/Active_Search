// Generated by gencpp from file active_grasp/AABBox.msg
// DO NOT EDIT!


#ifndef ACTIVE_GRASP_MESSAGE_AABBOX_H
#define ACTIVE_GRASP_MESSAGE_AABBOX_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Point.h>
#include <geometry_msgs/Point.h>

namespace active_grasp
{
template <class ContainerAllocator>
struct AABBox_
{
  typedef AABBox_<ContainerAllocator> Type;

  AABBox_()
    : min()
    , max()  {
    }
  AABBox_(const ContainerAllocator& _alloc)
    : min(_alloc)
    , max(_alloc)  {
  (void)_alloc;
    }



   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _min_type;
  _min_type min;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _max_type;
  _max_type max;





  typedef boost::shared_ptr< ::active_grasp::AABBox_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::active_grasp::AABBox_<ContainerAllocator> const> ConstPtr;

}; // struct AABBox_

typedef ::active_grasp::AABBox_<std::allocator<void> > AABBox;

typedef boost::shared_ptr< ::active_grasp::AABBox > AABBoxPtr;
typedef boost::shared_ptr< ::active_grasp::AABBox const> AABBoxConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::active_grasp::AABBox_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::active_grasp::AABBox_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::active_grasp::AABBox_<ContainerAllocator1> & lhs, const ::active_grasp::AABBox_<ContainerAllocator2> & rhs)
{
  return lhs.min == rhs.min &&
    lhs.max == rhs.max;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::active_grasp::AABBox_<ContainerAllocator1> & lhs, const ::active_grasp::AABBox_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace active_grasp

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::active_grasp::AABBox_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::active_grasp::AABBox_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::active_grasp::AABBox_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::active_grasp::AABBox_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::active_grasp::AABBox_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::active_grasp::AABBox_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::active_grasp::AABBox_<ContainerAllocator> >
{
  static const char* value()
  {
    return "93aa3d73b866f04880927745f4aab303";
  }

  static const char* value(const ::active_grasp::AABBox_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x93aa3d73b866f048ULL;
  static const uint64_t static_value2 = 0x80927745f4aab303ULL;
};

template<class ContainerAllocator>
struct DataType< ::active_grasp::AABBox_<ContainerAllocator> >
{
  static const char* value()
  {
    return "active_grasp/AABBox";
  }

  static const char* value(const ::active_grasp::AABBox_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::active_grasp::AABBox_<ContainerAllocator> >
{
  static const char* value()
  {
    return "  geometry_msgs/Point min\n"
"  geometry_msgs/Point max\n"
"  \n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::active_grasp::AABBox_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::active_grasp::AABBox_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.min);
      stream.next(m.max);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct AABBox_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::active_grasp::AABBox_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::active_grasp::AABBox_<ContainerAllocator>& v)
  {
    s << indent << "min: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.min);
    s << indent << "max: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.max);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ACTIVE_GRASP_MESSAGE_AABBOX_H
